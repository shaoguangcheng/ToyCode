// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple.proto

#ifndef PROTOBUF_simple_2eproto__INCLUDED
#define PROTOBUF_simple_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace simple {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_simple_2eproto();
void protobuf_AssignDesc_simple_2eproto();
void protobuf_ShutdownFile_simple_2eproto();

class arrayShape;
class array_;
class array;

// ===================================================================

class arrayShape : public ::google::protobuf::Message {
 public:
  arrayShape();
  virtual ~arrayShape();

  arrayShape(const arrayShape& from);

  inline arrayShape& operator=(const arrayShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const arrayShape& default_instance();

  void Swap(arrayShape* other);

  // implements Message ----------------------------------------------

  arrayShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const arrayShape& from);
  void MergeFrom(const arrayShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int32 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int32 value);
  inline void add_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:simple.arrayShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_;
  mutable int _dim_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_simple_2eproto();
  friend void protobuf_AssignDesc_simple_2eproto();
  friend void protobuf_ShutdownFile_simple_2eproto();

  void InitAsDefaultInstance();
  static arrayShape* default_instance_;
};
// -------------------------------------------------------------------

class array_ : public ::google::protobuf::Message {
 public:
  array_();
  virtual ~array_();

  array_(const array_& from);

  inline array_& operator=(const array_& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const array_& default_instance();

  void Swap(array_* other);

  // implements Message ----------------------------------------------

  array_* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const array_& from);
  void MergeFrom(const array_& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // repeated float data = 4 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // optional .simple.arrayShape shape = 5;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 5;
  inline const ::simple::arrayShape& shape() const;
  inline ::simple::arrayShape* mutable_shape();
  inline ::simple::arrayShape* release_shape();
  inline void set_allocated_shape(::simple::arrayShape* shape);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:simple.array_)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::simple::arrayShape* shape_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_simple_2eproto();
  friend void protobuf_AssignDesc_simple_2eproto();
  friend void protobuf_ShutdownFile_simple_2eproto();

  void InitAsDefaultInstance();
  static array_* default_instance_;
};
// -------------------------------------------------------------------

class array : public ::google::protobuf::Message {
 public:
  array();
  virtual ~array();

  array(const array& from);

  inline array& operator=(const array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const array& default_instance();

  void Swap(array* other);

  // implements Message ----------------------------------------------

  array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const array& from);
  void MergeFrom(const array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .simple.array_ _array_ = 8;
  inline int _array__size() const;
  inline void clear__array_();
  static const int kArrayFieldNumber = 8;
  inline const ::simple::array_& _array_(int index) const;
  inline ::simple::array_* mutable__array_(int index);
  inline ::simple::array_* add__array_();
  inline const ::google::protobuf::RepeatedPtrField< ::simple::array_ >&
      _array_() const;
  inline ::google::protobuf::RepeatedPtrField< ::simple::array_ >*
      mutable__array_();

  // @@protoc_insertion_point(class_scope:simple.array)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::simple::array_ > _array__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_simple_2eproto();
  friend void protobuf_AssignDesc_simple_2eproto();
  friend void protobuf_ShutdownFile_simple_2eproto();

  void InitAsDefaultInstance();
  static array* default_instance_;
};
// ===================================================================


// ===================================================================

// arrayShape

// repeated int32 dim = 1 [packed = true];
inline int arrayShape::dim_size() const {
  return dim_.size();
}
inline void arrayShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int32 arrayShape::dim(int index) const {
  return dim_.Get(index);
}
inline void arrayShape::set_dim(int index, ::google::protobuf::int32 value) {
  dim_.Set(index, value);
}
inline void arrayShape::add_dim(::google::protobuf::int32 value) {
  dim_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
arrayShape::dim() const {
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
arrayShape::mutable_dim() {
  return &dim_;
}

// -------------------------------------------------------------------

// array_

// required int32 width = 2;
inline bool array_::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void array_::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void array_::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void array_::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 array_::width() const {
  return width_;
}
inline void array_::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 3;
inline bool array_::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void array_::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void array_::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void array_::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 array_::height() const {
  return height_;
}
inline void array_::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// repeated float data = 4 [packed = true];
inline int array_::data_size() const {
  return data_.size();
}
inline void array_::clear_data() {
  data_.Clear();
}
inline float array_::data(int index) const {
  return data_.Get(index);
}
inline void array_::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void array_::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
array_::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
array_::mutable_data() {
  return &data_;
}

// optional .simple.arrayShape shape = 5;
inline bool array_::has_shape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void array_::set_has_shape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void array_::clear_has_shape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void array_::clear_shape() {
  if (shape_ != NULL) shape_->::simple::arrayShape::Clear();
  clear_has_shape();
}
inline const ::simple::arrayShape& array_::shape() const {
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::simple::arrayShape* array_::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::simple::arrayShape;
  return shape_;
}
inline ::simple::arrayShape* array_::release_shape() {
  clear_has_shape();
  ::simple::arrayShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void array_::set_allocated_shape(::simple::arrayShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
}

// optional string name = 6;
inline bool array_::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void array_::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void array_::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void array_::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& array_::name() const {
  return *name_;
}
inline void array_::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void array_::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void array_::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* array_::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* array_::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void array_::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// array

// optional string name = 7;
inline bool array::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void array::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void array::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void array::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& array::name() const {
  return *name_;
}
inline void array::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void array::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void array::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* array::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* array::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void array::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .simple.array_ _array_ = 8;
inline int array::_array__size() const {
  return _array__.size();
}
inline void array::clear__array_() {
  _array__.Clear();
}
inline const ::simple::array_& array::_array_(int index) const {
  return _array__.Get(index);
}
inline ::simple::array_* array::mutable__array_(int index) {
  return _array__.Mutable(index);
}
inline ::simple::array_* array::add__array_() {
  return _array__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::simple::array_ >&
array::_array_() const {
  return _array__;
}
inline ::google::protobuf::RepeatedPtrField< ::simple::array_ >*
array::mutable__array_() {
  return &_array__;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace simple

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_simple_2eproto__INCLUDED
